=== A Standard fHaTOS Boot Config
  * common router prefixes
  * console w/ terminal spawned
  * mqtt-backed distributed shared memory mounted
  ** furi read/write resolution across cluster
  ---
  * on esp32:
  ** wifi config and connect
  ** mdns config and connect
  ** gpio pin ?q:default mounted
  * on native:
  ** local file system mounted
===
[
 ------------------------------- BOOT GLOBAL VARIABLES -------------------------------
 params => [
   host => fhat1,
   --- esp32 only (native platforms must provide network connectivity)
   wifi => [ssid=><Rodkins-2G>,
            password=>'puppymama',
            mnds=>*/sys/info/platform],
   --- all platforms
   mqtt => [broker=><mqtt://chibi.local:1883>],
   net  => [mdns=>/fos/net/inet/mdns()]],
 ---------------------------------- KERNEL BOOT OBJS ----------------------------------
 info     =>[name  =>*/boot/config/params/host]@/sys/info, --- add pairs as needed
 scheduler=>[config=>[def_stack_size=>65536]]@/sys/scheduler,
 router   =>[config=>[auto_prefix=>[<>,/mmadt/ext/,/mmadt/,/sys/,/io/,/fos/s/]]]@/sys/router,
 typer    =>[config=>[register=>[/mmadt/#,/fos/#],
                      import=>[/mmadt/#,/fos/#]]]@/sys/typer,
 ----------------------------------- USER BOOT SETUP -----------------------------------
 setup=>setup?obj{?}<=obj{.}()[
    heap[[pattern=><+/#>]]@/mnt/var;
    router::mount(@/mnt/var);
    *<info/platform>-<
      [is(eq(esp32))=>  --- esp specific
        typer::import(/fos/net/#);
        /fos/net/wifi[[config=>[
          ssid=>*/boot/config/params/wifi/ssid,
          password=>*/boot/config/params/wifi/password,
          mdns=>*<info/platform>]]]@/io/wifi;
        */io/wifi.connect();
        typer::import(/fos/io/gpio);
        /io/gpio/+?q:default -> |(<<(2).as(int).as(gpio).read()),
       is(eq(native))=> --- native specific
        fs[[pattern=>/fs/#,config=>[root=><.>]]]@/mnt/fs;
        router::mount(@/mnt/fs)]>-;
    dsm[[pattern=>//+/#,config=>[
         broker=>*/boot/config/params/mqtt/broker,
         client=>*/boot/config/params/net/mdns,
         async=>true]]]@/mnt/cluster;
    router::mount(@/mnt/cluster);
    typer::import(/fos/ui);
    /fos/ui/terminal[[=>]]@/io/terminal;
    /fos/ui/console[[=>]]@/io/console;
    /io/terminal/netio?q:sub -> |(print('!y==>!!{{_}}\n'));
    *</boot/config/params/host>.<//{{_}}/info>.-<[
            ->*|/sys/info,
            <{{_.<<(1)}}/#?q:sub>]
       .<1>->|(/sys/scheduler::eval(_,/io/terminal/netio));
    /io/console/config/stack_size -> 81920;
    scheduler::spawn(@/io/console);
    --- /boot/# -> noobj;
 ]]@/boot/config
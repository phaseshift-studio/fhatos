#!/bin/bash

#
#  FhatOS: A Distributed Operating System
#  Copyright (c) 2024 PhaseShift Studio, LLC
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#############################
## DEFINE GLOBAL VARIABLES ##
#############################
NC='\033[0m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
#BOLDRED='\033[1;31m'
#IRED='\033[0;91m'
GREEN='\033[0;32m'
BOLDGREEN='\033[1;32m'
MAGENTA='\033[0;35m'
BLUE='\033[0;34m'
FHATOS="${MAGENTA}F${GREEN}h${BLUE}a${RED}t${MAGENTA}O${BLUE}S${NC}"
LB="${MAGENTA}[${YELLOW}"
RB="${MAGENTA}]${NC}"
#############################

help_menu() {
  echo -e "usage:
  fhat-dev {clean | test | build | upload} {esp32 | native | docs | <empty>} {<extra_args>}
  example usasge:
    fhat-dev clean
    fhat-dev package native
    fhat-dev build docs
    fhat-dev test native test_scheduler
    fhat-dev build esp32 fhatos
    fhat-dev upload esp32
    fhat-dev upload esp32 --skip_fs
    fhat-dev build docs
    fhat-dev test"
}

echo -e "${FHATOS} ${MAGENTA}Development Tool${NC}"

if [[ "${2}" == "help" || "${2}" == "--help" || "${2}" == "-h" ]]; then
  help_menu
else
  working_directory=$(pwd)
  if [ -z "$FHATOS_HOME" ]; then
    echo -e " ${LB}fhatos ${RED}FHATOS_HOME=<not set> ${GREEN}(setting to current directory)${NC}${RB}"
    FHATOS_HOME=$(pwd)

  fi
  echo -e " ${LB}fhatos            ${GREEN}FHATOS_HOME=${FHATOS_HOME}${NC}${RB}";
  cd "${FHATOS_HOME}" || exit 1
  echo -e " ${LB}working directory ${GREEN}$working_directory${NC}${RB}"

  # create bash key/value pairs for all provided args
  for ARGUMENT in "$@"
  do
   KEY=$(echo $ARGUMENT | cut -f1 -d=)
   KEY_LENGTH=${#KEY}
   VALUE="${ARGUMENT:$KEY_LENGTH+1}"
   export "$KEY"="$VALUE"
  done

  if [[ -z $j ]]; then
    export j=6
  fi
  export CMAKE_BUILD_PARALLEL_LEVEL="$j"

  if [[ -z $o ]]; then
    export o=1
  fi

  if [[ -z $1  ]]; then
    filter=" "
    echo -e " ${LB}no target${RB}"
    exit 1
  else
    echo -e " ${LB}target            ${GREEN}$1${NC}${RB}"
  fi

  if [[ -z $2 ]]; then
    environ=" "
    platform=" "
    echo -e " ${LB}platform          ${GREEN}all environments${NC}${RB}"
  else
    environ="--environment $2"
    platform="$2"
    echo -e " ${LB}platform          ${GREEN}$environ${NC}${RB}"
  fi

  if [[ -z $3  ]]; then
    filter=" "
    echo -e " ${LB}configuration     ${GREEN}<none>${NC}${RB}"
  else
    filter="${@:3}"
    echo -e " ${LB}configuration     ${GREEN}$filter${NC}${RB}"
  fi
    echo -e " ${LB}parallel          ${GREEN}j=$j${NC}${RB}"
    echo -e " ${LB}optimization      ${GREEN}o=$o${NC}${RB}"

  echo -e " ${MAGENTA}---------${NC}"
  echo -e " ${LB}dependency ${GREEN}libpaho-mqtt-dev${NC}${RB}"
  found=$(ldconfig -p | grep -q libpaho-mqtt-dev)
  if [ ! "${found}" ]; then
    echo -e "   libpaho-mqtt-dev ${GREEN}FOUND${NC}"
  else
    echo -e " ${LB}libpaho-mqtt-dev${RB} ${RED}NOT FOUND${NC}"
    sudo apt-get install -y libpaho-mqtt-dev rlwrap
    [ $? -eq 0 ]  || exit 1
  fi
    echo -e " ${LB}dependency ${GREEN}libavahi-client-dev${NC}${RB}"
    found=$(ldconfig -p | grep -q libavahi-client-dev)
    if [ ! "${found}" ]; then
      echo -e "   libavahi-client-dev ${GREEN}FOUND${NC}"
    else
      echo -e " ${LB}libavahi-client-dev${RB} ${RED}NOT FOUND${NC}"
      sudo apt-get install -y libavahi-client-dev rlwrap
      [ $? -eq 0 ]  || exit 1
    fi


fi
########################################################################
########################################################################
########################################################################
status_check() {
   exit_code=$1
   message=$2
   if [[ $exit_code == 0 ]]; then
     echo -e "${GREEN}[ OK ]${NC} ${YELLOW}$message${NC}"
   else
     echo -e "${RED}[ERROR]${NC} ${YELLOW}$message${NC}"
    cd "${working_directory}" || exit 1
    exit 1
   fi
}

check_addr() {
  if [[ $platform == esp32* || -z "${platform}"  ]]; then
      shift
      shift
      local extra_args=${@:1}
      addr2line -pr -e .pio/build/"${platform}"/firmware.elf -a "${extra_args}"
  fi
}

clean_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
     mv build/_deps .
     rm -rf build/
     mkdir build/
     mv _deps build/
     rm -rf docs/build/
     rm -rf test/build/
     rm -rf cmake-*/
  fi
}

clean_esp32() {
  if [[ $platform == esp32* || -z "${platform}"  ]]; then
    platformio run --environment ${platform} --target clean
    status_check $? "pio clean"
    platformio run --environment ${platform} --target erase
    status_check $? "pio erase"
  fi
}

clean_rpi() {
  if [[ $platform == "rpi" || -z "${platform}"  ]]; then
    platformio run --environment ${platform} --target clean
    status_check $? "pio clean"
    platformio run --environment ${platform} --target erase
    status_check $? "pio erase"
  fi
}

edit_partition() {
  if [[ $platform == esp32* ]]; then
    pio run -t edit_partition -e esp32-t7-s3
  fi
}

make_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
    shift
    shift
    local extra_args=${@:1}
    mkdir -p build
    cd build || exit 1;
    status_check $? "mkdir and cd build"
    mkdir -p exclude
    mv ../src/model/ui exclude
    echo -e " ${LB}evaluating ${GREEN}cmake .. -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF --parallel ${j} ${extra_args}; make -j${j} -o${o}${RB}"
    cmake .. -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF ${extra_args};
    status_check $? "cmake"
    make -j"${j}" -o"${o}"; # j parallel and o1 low optimization level
    status_check $? "make"
    cd ..;
    mv build/exclude/ui src/model/
  fi
}

make_esp32() {
  if [[ $platform == esp32* || -z "${platform}" ]]; then
    shift
    shift
    local extra_args=${@:1}
    platformio run ${environ} ${extra_args}
    status_check $? "pio run"
    platformio run ${environ} --target buildfs
    status_check $? "pio buildfs"
    printf '%b\n' "$(cat board/partition/large_code.csv)"
  fi
}

make_rpi() {
  if [[ $platform == "rpi" || -z "${platform}"  ]]; then
    shift
    shift
    local extra_args=${@:1}
    status_check $? "pio run"
    [ $? -eq 0 ]  || exit 1
    platformio run ${environ} --target buildfs
    status_check $? "pio buildfs"
    printf '%b\n' "$(cat board/partition/large_code.csv)"
  fi
}

package_native() {
   if [[ $platform == "native" || -z "${platform}" ]]; then
      shift
      shift
      local extra_args=${@:1}
      cd build || exit 1;
      cpack .. ${extra_args}
      cd ..
    fi
}

test_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
    make_native ${@} -DBUILD_TESTS=ON
    shift
    shift
    local extra_args=${@:1}
    cd build/test
    status_check $? "cd build/test"
    ctest ${extra_args}
    status_check $? "ctest"
    ./tests --colour-mode ansi --success --durations yes --benchmark-samples 10 --verbosity high "${extra_args}"
    status_check $? "catch2 tests"
    cd ../..
  fi
}

test_esp32() {
  if [[ $platform == esp32* || -z "${platform}" ]]; then
    shift
    shift
    local extra_args=${@:1}
    # platformio run --target clean
    platformio test -e "${platform}" -vvv "--filter=${filter}"
    status_check $? "pio test"
  fi
}

build_boot_config() {
  pushd .
  cd "${FHATOS_HOME}"/conf || exit 1;
  echo -e "\n${FHATOS} ${BLUE}boot_loader configuration${NC}\n"
  printf '%b\n' "$(cat boot_config.obj)\n"
  xxd -i boot_config.obj > "${FHATOS_HOME}"/src/boot_config.hpp
  status_check $? "generated boot_config.hpp (header encoding)"
  cp "${FHATOS_HOME}"/conf/boot_config.obj "${FHATOS_HOME}"/data/boot/
  status_check $? "generated data/boot/boot_config.obj (littlefs encoding)"
  status_check $? "boot_config"
  popd
}

build_rlwrap_completions() {
  # Type::singleton()->save_type(id_p(FOS_TYPE_INST_URI "from_get"), Insts::from_get(x(0)));
  (cat "${FHATOS_HOME}"/src/lang/mmadt/type.hpp |
    grep FOS_TYPE_INST_URI |
    grep -o -P '(?<=FOS_TYPE_INST_URI\s").*(?="\),?(\s)Insts)' > "${FHATOS_HOME}"/bin/.fhatos_completions &&
    echo -e "[101%] ${BOLDGREEN}Analyzing CXX source to create rlwrap .fhatos_completions${NC}") ||
  (echo -e "${RED}[ERROR]${NC} Regular expression failed while building ${BLUE}${FHATOS_HOME}/bin/.fhatos_completions${NC}" &&
    exit 1;)
}

build_docs() {
    shift
    shift
    local extra_args=${@:1}
    mkdir -p build
    cd build || exit 1;
    cmake .. -DBUILD_TESTS=OFF -DBUILD_DOCS=ON ${extra_args} --parallel=${j};
    status_check $? "cmake docs"
    make -j${j} -o1; # j6 parallel and o1 low optimization level
    status_check $? "make docs"
    cd ..;
}

########################################################################
########################################################################
########################################################################

if [[ $1 == "check" ]]; then
  check_addr "${@}"
elif [[ $1 == "clean" ]]; then
  clean_native
  clean_esp32
  clean_rpi
elif [[ $1 == "build" &&  $2 == "docs" ]]; then
  build_docs "${@}"
  status_check $? "doc build"
elif [[ $1 == "test" ]]; then
  test_native "${@}"
  test_esp32 "${@}"
elif [[ $1 == "package" ]]; then
  package_native "${@}"
elif [[ $1 == "build" ]]; then
  build_boot_config
  make_native "${@}"
  make_esp32 "${@}"
  make_rpi "${@}"
  build_rlwrap_completions
elif [[ $1 == "partition" ]]; then
  edit_partition
elif [[ $1 == "upload" ]]; then
  build_boot_config
  # clean_esp32
  if [[ $3 != "--skip_fs" ]]; then
    echo -e "\n${BLUE}ESP32${NC} ${FHATOS} ${BLUE}flash memory partition${NC}\n"
    printf '%b\n' "$(cat board/partition/large_code.csv)\n"
    platformio run ${environ} --target buildfs
    status_check $? "pio buildfs"
    platformio run ${environ} --target uploadfs
  fi
  status_check $? "pio uploadfs"
  platformio run ${environ} --target upload
  status_check $? "pio upload"
  build_rlwrap_completions
else
  help_menu "${@}"
fi
###### DONE
echo -e "${GREEN}SUCCESS${NC}"

#!/bin/bash

#
#  FhatOS: A Distributed Operating System
#  Copyright (c) 2024 PhaseShift Studio, LLC
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#############################
## DEFINE GLOBAL VARIABLES ##
#############################
NC='\033[0m'
RED='\033[0;31m'
#BOLDRED='\033[1;31m'
#IRED='\033[0;91m'
GREEN='\033[0;32m'
BOLDGREEN='\033[1;32m'
MAGENTA='\033[0;35m'
BLUE='\033[0;34m'
FHATOS="${MAGENTA}F${GREEN}h${BLUE}a${RED}t${MAGENTA}O${BLUE}S${NC}"
LB="${MAGENTA}[${NC}"
RB="${MAGENTA}]${NC}"
#############################

echo -e "${FHATOS} ${MAGENTA}Development Tool${NC}"
if [ -z "$FHATOS_HOME" ]; then
  echo -e " ${RED}FHATOS_HOME${NC} must be set to proceed";
  exit 1
else
  echo -e " ${GREEN}FHATOS_HOME${NC} set to ${BLUE}${FHATOS_HOME}${NC}";
  cd "${FHATOS_HOME}" || exit 1
fi

if [[ -z $1  ]]; then
  filter=" "
  echo -e " ${LB}no operation to perform${RB}"
  exit 1
else
  echo -e " ${LB}performing ${GREEN}$1${NC}${RB}"
fi

if [[ -z $2 ]]; then
  environ=" "
  platform=" "
  echo -e " ${LB}processing ${GREEN}all environments${NC}${RB}"
else
  environ="--environment $2"
  platform="$2"
  echo -e " ${LB}processing ${GREEN}$environ${NC}${RB}"
fi

if [[ -z $3  ]]; then
  filter=" "
  echo -e " ${LB}no configurations${RB}"
else
  filter="${@:3}"
  echo -e " ${LB}configurations: ${GREEN}$filter${NC}${RB}"
fi
echo -e " ${LB}current location: ${BLUE}$(pwd)${NC}${RB}"

clean_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
     mv build/_deps .
     rm -rf build/
     mkdir build/
     mv _deps build/
     rm -rf docs/build/
     rm -rf test/build/
     rm -rf cmake-*/
     platformio run --target clean
  fi
}

clean_esp32() {
  if [[ $platform == esp32* || -z "${platform}"  ]]; then
    platformio run --environment ${platform} --target clean
    platformio run --environment ${platform} --target erase
  fi
}

clean_rpi() {
  if [[ $platform == "rpi" || -z "${platform}"  ]]; then
    platformio run --environment ${platform} --target clean
    platformio run --environment ${platform} --target erase
  fi
}

make_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
    shift
    shift
    local extra_args=${@:1}
    mkdir -p build
    cd build || exit 1;
    echo -e " ${LB}evaluating: ${GREEN}cmake .. -DBUILD_DOCS=OFF ${extra_args}; make -j6 -o1${RB}"
    cmake .. -DBUILD_DOCS=OFF ${extra_args};
    make -j6 -o1; # j6 parallel and o1 low optimization level
    cd ..;
  fi
}

make_esp32() {
  if [[ $platform == esp32* || -z "${platform}" ]]; then
    shift
    shift
    local extra_args=${@:1}
    platformio run ${environ} ${extra_args}
    platformio run ${environ} --target buildfs
    printf '%b\n' "$(cat board/partition/large_code.csv)"
  fi
}

make_rpi() {
  if [[ $platform == "rpi" || -z "${platform}"  ]]; then
    shift
    shift
    local extra_args=${@:1}
    platformio run ${environ} ${extra_args}
    platformio run ${environ} --target buildfs
    printf '%b\n' "$(cat board/partition/large_code.csv)"
  fi
}

ctest_native() {
  if [[ $platform == "native" || -z "${platform}" ]]; then
    shift
    shift
    local extra_args=${@:1}
    cd build/test || exit 1;
    ctest ${extra_args}
    cd ../..
  fi
}

test_native() {
  if [[ $platform == "native" || -z "${platform}"  ]]; then
    make_native "${@}"
    shift
    shift
    local extra_args=${@:1}
    cd build/test || exit 1;
    ctest ${extra_args}
    cd ../..
  fi
}

test_esp32() {
  if [[ $platform == esp32* || -z "${platform}" ]]; then
    shift
    shift
    local extra_args=${@:1}
    # platformio run --target clean
    platformio test ${environ} -v "--filter=${filter}"
  fi
}

build_rlwrap_completions() {
  # Type::singleton()->save_type(id_p(FOS_TYPE_INST_URI "from_get"), Insts::from_get(x(0)));
  (cat "${FHATOS_HOME}"/src/language/mmadt/type.hpp |
    grep FOS_TYPE_INST_URI |
    grep -o -P '(?<=FOS_TYPE_INST_URI\s").*(?="\),?(\s)Insts)' > "${FHATOS_HOME}"/bin/.fhatos_completions &&
    echo -e "[101%] ${BOLDGREEN}Analyzing CXX source to create rlwrap .fhatos_completions${NC}") ||
  (echo -e "${RED}[ERROR]${NC} Regular expression failed while building ${BLUE}${FHATOS_HOME}/bin/.fhatos_completions${NC}" &&
    exit 1;)

}

build_docs() {
    shift
    shift
    local extra_args=${@:1}
    mkdir -p build
    cd build || exit 1;
    cmake .. -DBUILD_TESTS=OFF -DBUILD_DOCS=ON ${extra_args};
    make -j6 -o1; # j6 parallel and o1 low optimization level
    cd ..;
}

if [[ $1 == "clean" ]]; then
  clean_native
  clean_esp32
  clean_rpi
elif [[ $1 == "build" &&  $2 == "docs" ]]; then
  build_docs "${@}"
elif [[ $1 == "ctest" ]]; then
  ctest_native "${@}"
  # test_esp32
elif [[ $1 == "test" ]]; then
  test_native "${@}"
  test_esp32 "${@}"
elif [[ $1 == "build" ]]; then
  make_native "${@}"
  make_esp32 "${@}"
  make_rpi "${@}"
  build_rlwrap_completions
elif [[ $1 == "upload" ]]; then
  # clean_esp32
  echo -e "\n${BLUE}ESP32${NC} ${FHATOS} ${BLUE}Flash Memory Partition${NC}\n"
  printf '%b\n' "$(cat board/partition/large_code.csv)\n"
  platformio run ${environ} --target buildfs
  platformio run ${environ} --target uploadfs
  platformio run ${environ} --target upload
  build_rlwrap_completions
else
   echo -e "usage: 
  fhat-dev {clean | test | build | upload} {esp32 | native | <empty>} {<extra_args>}
    fhat-dev clean
    fhat-dev test native test_scheduler
    fhat-dev build esp32 fhatos
    fhat-dev upload esp32
    fhat-dev test"
fi
if [[ $? == 0 ]]; then
    echo -e "${GREEN}SUCCESS"
else
    echo -e "${RED}FAILURE"
fi

/*! `mmadt` grammar compiled for Highlight.js 11.10.0 */
(function () {
    const regex = hljs.regex;
    var mmadt_grammar = (function () {
        'use strict';

        /*
            Language: mmadt
            Author: Dogturd Stynx
        */

        /** @type LanguageFn */
        function mmadt(hljs) {
            const VAR = {};
            const MMADT_DOC_CALLOUT = {
                className: 'mmadt-doc-callout',
                match: /(?<=\s)\([0-9]+\)/,
                returnBegin: false,
                relevance: 10
            }
            const MMADT_FORM = {
                className: 'mmadt-form',
                match: /\[|]|\,|\{|\}|\(|\)|(<=)|(=>)|'|<|>|\/|\\|-|‚ï≤|‚ï±/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_SUGAR_INST = {
                className: 'mmadt-sugar-inst',
                match: /[@‚ñ†|*_.]|(->)|(==)|(-->)|(->)|(<<)|(>>)|(\^)|(v)|(\?=)|(\?>)|(\?<)|(\?>=)|(\?<=)/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_REC_KEY = {
                className: 'mmadt-rec-key',
                begin: /[_a-zA-Z0-9:/]?[_a-zA-Z0-9:/]*(?==>)/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_SINGLE_COMMENT = {
                className: 'mmadt-comment',
                begin: /---.*/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_MULTI_COMMENT = {
                className: 'mmadt-comment',
                begin: /===.*===$/,
                returnBegin: false,
                relevance: 0
            }
            const FHATOS_PROMPT_BEGIN = {
                className: 'fhatos-prompt-begin',
                begin: /fhatos(?=>)/,
                returnBegin: false,
                relevance: 0
            }
            const FHATOS_PROMPTY_END = {
                className: 'fhatos-prompt-end',
                begin: /(?<=(fhatos))>/,
                returnBegin: false,
                relevance: 0
            }
            const FHATOS_RESULT_PREFIX = {
                className: 'fhatos-result-prefix',
                begin: /==+>/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_REC = {
                className: 'mmadt-rec',
                begin: /=>/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_TYPE = {
                className: 'mmadt-type',
                begin: /([_a-zA-Z/]?[_a-zA-Z0-9/]+(?=\[))|((?<=\[_)bool|int|real|str|uri|rec|lst|bcode|inst(?=]))/,
                returnBegin: false,
                relevance: 0
            }
            const FORWARD_SLASH = {
                begin: /[/]/,
                returnBegin: false
            }
            const MMADT_URI = {
                className: 'mmadt-uri',
                begin: /([/]+[:a-zA-Z0-9_#+/]+)|([/]*[:a-zA-Z0-9_#+]+(([:|/][:_a-zA-Z0-9_#+./]*([?][{}?<a-zA-Z0-9&_,=#.+/]*)?)|([?][{}?<a-zA-Z0-9&,=#.+/]*)))/,
                returnBegin: false,
                contains: [FORWARD_SLASH],
                relevance: 0
            }
            const MMADT_FURI_QUERY = {
                className: 'mmadt-furi-query',
                begin: /\?/,
                returnBegin: false,
                contains: [MMADT_URI],
                relevance: 10
            }
            const MMADT_BOOL = {
                className: 'mmadt-bool',
                begin: /true|false/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_NOOBJ = {
                className: 'mmadt-noobj',
                begin: /noobj/,
                returnBegin: false,
                relevance: 0
            }
            const FHATOS_LOG_INFO = {
                className: 'fhatos-log-info',
                match: /\[INFO]/,
            }
            const FHATOS_LOG_ERROR = {
                className: 'fhatos-log-error',
                match: /\[ERROR]/,
            }
            const FHATOS_LOG_WARN = {
                className: 'fhatos-log-warn',
                match: /\[WARN]/,
            }
            const FHATOS_THROWN = {
                className: 'fhatos-thrown',
                match: /thrown\sat\sinst/
            }
            const FHATOS_SYS_FURI = {
                className: 'fhatos-sys-furi',
                begin: /(?<=\[)(\/sys\/scheduler)|(\/sys\/router)(?=])/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_KEYWORD = {
                className: 'mmadt-keyword',
                begin:/[a-zA-Z0-9_]+(?=\()/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_REAL = {
                classname: 'mmadt-real',
                begin:/[+-]?[0-9]+[.][0-9]+/,
                relevance: 0,
                returnBegin:false
            }
            const MMADT_INSTF_CPP = {
                className: 'mmadt-inst-f-cpp',
                begin: /(?<=\[)cpp(?=])/,
                returnBegin: false,
                relevance: 0
            }
            const MMADT_INT = {
                className: 'mmadt-int',
                begin: /(?<![a-zA-Z])[+-]?[0-9]+(?![a-zA-Z])/,
                relevance: 0,
                returnBegin:false
            }
            const MMADT_PIPE = {
                className: 'mmadt-pipe',
                begin: /‚îå|‚îú|‚îê|‚îî|‚îò|‚îÇ|‚î§|‚îÄ|‚ã∞|‚ã±|‚Æù|‚Æû|‚Æú|‚Æü/,
                relevance: 0,
                returnBegin: false
            }
            const PHASESHIFT_STUDIO_HEADER = {
                className: 'phaseshift-studio-header',
                match: /(PhaseShift Studio Presents)|(A Dogturd Stynx Production)/,
            }
        const FOS_DOCS_IF_ELSE_THEN_CASE_DO = {
            className: 'fos-docs-if-else-then-case-do',
            begin: /\((if|else|else if|then|case|do)\)/
            }
            return {
                name: 'mmadt',
                contains: [
                    PHASESHIFT_STUDIO_HEADER,
                    MMADT_DOC_CALLOUT,
                    FOS_DOCS_IF_ELSE_THEN_CASE_DO,
                    FHATOS_SYS_FURI,
                    FHATOS_PROMPT_BEGIN,
                    FHATOS_PROMPTY_END,
                    MMADT_REC,
                    FHATOS_RESULT_PREFIX,
                    FHATOS_LOG_INFO,
                    FHATOS_LOG_ERROR,
                    FHATOS_LOG_WARN,
                    FHATOS_THROWN,
                    MMADT_SINGLE_COMMENT,
                    MMADT_MULTI_COMMENT,
                    MMADT_FURI_QUERY,
                    MMADT_BOOL,
                    MMADT_INT,
                    MMADT_REAL,
                    MMADT_REC_KEY,
                    MMADT_TYPE,
                    MMADT_NOOBJ,
                    MMADT_INSTF_CPP,
                    MMADT_SUGAR_INST,
                    MMADT_KEYWORD,
                    MMADT_URI,
                    MMADT_FORM,
                    MMADT_PIPE
                    //MMADT_STR,
                ]
            };
        }

        return mmadt;
    })();

    hljs.registerLanguage('mmadt', mmadt_grammar);
    hljs.addPlugin(new CopyButtonPlugin({
        hook: (code, el) => {
            lines = code.split("\n");
            const pred = (item) => (!item.startsWith("=") &&
            null == item.match(/^\[(INFO|ERROR|DEBUG|WARN|TRACE)]/) &&
            !item.trim().startsWith("thrown"));
            const func = (item) => item.replace("fhatos>","").replaceAll(/-\([0-9]+\)/g,"")
            return lines = lines.filter(pred).map(func).join("\n");
        },
        callback: (code, el) => {
            console.log(code);
        },
    }));
    locales["en"] = ["copy","üê∑","copied to clipboard"];
})();